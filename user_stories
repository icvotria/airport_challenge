As an air traffic controller 
So I can get passengers to a destination
I want to instruct a plane to land at an airport

As an air traffic controller
So I can get passengers on the way to their destination
I want to instruct a plane to take off from an airport and confirm
that it is no longer in the airport

As an air traffic controller
To ensure safety
I want to prevent landing when the airport is full

As the system designer
So that the software can be used for many different airports
I would like a default airport capacity that can be overridden as
appropriate

As an air traffic controller
To ensure safety
I want to prevent takeoff when weather is stormy

As an air traffic controller
To ensure safety
I want to prevent landing when weather is stormy

1. In plane_spec.rb, made a test to check that a Plane class object
responds to method land.
  1.1 Added land method to Plane class
2. In plane_spec.rb, made a test to check that a Plane class
object responds to method take_off
  2.1 Added take_off method to Plane class
3. In airport_spec.rb, made a test to check that an Airport class
object responds to method confirm_takeoff
  3.1 Added confirm_takeoff method to Airport class
4. In airport_spec.rb, made a test to check for error message
when a plane tries to land in a full airport [first time I didn't
have 100% coverage - created an Airport object inside the describe
Airport block to fix. First time there were several error messages to
work through i.e. expected 0 args, got 1, NameError, NoMethodError -
worked through them to get to desired error, nothing was raised]
  4.1 Created land method in Airport class which accepts 1 argument
  4.2 Added guard clause to Airport method land(plane) to raise error
  if full?
  4.3 Set Airport method land? to return true [making sure to solve
  the problem as simply as I can - very hard to keep yourself on
  track with that!]
5. Created a test to check that Airport has a default capacity
  5.1 Added a DEFAULT_CAPACITY constant to Airport class and set it
  to an arbitrary value of 10
  5.2 Added capacity attribute using attr_reader, and initialised it
  to set its initial value to equal DEFAULT_CAPACITY
6. I updated the Airport class method full? to reflect the newly created capacity method
  6.1 Initialized an empty planes array in Airport class to hold planes and added planes attribute using attr_reader to DRY out @s
  6.2 Changed full? from false to return true only when the size of the planes array is equal or greater than the capacity
  6.3 I amended the raise error if plane tries to land in a full airport test to land enough planes at the airport to reach capacity
  6.4 I amended the Airport method land(plane) to push plane into the planes array, after the guard clause
7. Wrote test to check that the default capacity could be overridden
  7.1 Set capacity to default to DEFAULT_CAPACITY if no argument was passed
  7.2 Set the instance variable @capacity to equal the input if an argument was passed into Airport.new
8. Made tests to check that Airport methods land(plane) takeoff(plane) adds and removes the correct plane from planes array
9. Made test to check that Weather method weather_forecast returned a type of weather
  9.1 Wrote method in WeatherRatioSetter module that creates an array from a hash of types of weather and their weighted likelihoods; I arbitrarily chose a ratio of 25:1 for clear and stormy but these can be easily changed
  9.2 Wrote a method in Weather module that returns a random sample from the weighted array
10. Wrote tests for raising errors when taking off and landing in stormy weather
  10.1 

Refactoring

removed redundant tests:
  it { is_expected.to respond_to(:confirm_takeoff) } and
  it { is_expected.to respond_to(:full?) }
